<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2019, v.4002-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "concept.dtd">
<?Pub Inc?>
<concept id="AlarmStrategyDriversGuide-61EB851C" xml:lang="en">
<title>Alarm strategy</title>
<shortdesc>Alarms generated by a driver in a remote controller station
can be configured to display in the <keyword
conkeyref="wh_variables_n4/Supervisor"
conref="..\reuse\WH_SoftwareVariables_Tridium_N4_0000009934.dita#WHSoftwareVariablesTridium-9A3264AE/Supervisor"
></keyword> station.</shortdesc>
<prolog>
<metadata><keywords><indexterm>alarm<indexterm>strategy</indexterm
></indexterm></keywords></metadata>
</prolog>
<conbody>
<p>To configure alarms in one station to be received in another station
you add a <uicontrol>StationRecipient</uicontrol> under the <uicontrol
>AlarmService</uicontrol> container of the sending (source) station.
You then link the <uicontrol>AlarmClass</uicontrol> component to the <uicontrol
>StationRecipient</uicontrol>.</p>
<p>It is not necessary to use the same <uicontrol>AlarmClass</uicontrol
> component in the both stations (although that is one approach).
In the receiving station (often, the <keyword
conkeyref="wh_variables_n4/Supervisor"
conref="..\reuse\WH_SoftwareVariables_Tridium_N4_0000009934.dita#WHSoftwareVariablesTridium-9A3264AE/Supervisor"
></keyword>), you can configure all alarms from a remote station to
route to a single local <uicontrol>AlarmClass</uicontrol> or, use
a prepend or append scheme to route to different (but associated)
alarm classes, where all schemes work based on the names of the alarm
classes.</p>
<section><title>Prepend and append</title><p>The <parmname>Alarm Class</parmname
> property of a <uicontrol>NiagaraStation</uicontrol>&#x2019;s <uicontrol
>Alarms</uicontrol> extension offers two options: <option>Prepend</option
> and <option>Append</option>. An associated text string adds a message.
If you set up each remote station under the <keyword
conkeyref="wh_variables_n4/Supervisor"
conref="..\reuse\WH_SoftwareVariables_Tridium_N4_0000009934.dita#WHSoftwareVariablesTridium-9A3264AE/Supervisor"
></keyword>&#x2019;s <uicontrol>NiagaraNetwork</uicontrol> to replicate
the station database, each remote controller station can have identically-named <uicontrol
>AlarmClass</uicontrol> components along with other identical characteristics.</p
><p>Consider a large chain store where each remote controller is installed
at one retail store and each controller station these alarm classes:
tempAlarm, humAlarm, runAlarm, accessAlarm, and so on. In the <keyword
conkeyref="wh_variables_n4/Supervisor"
conref="..\reuse\WH_SoftwareVariables_Tridium_N4_0000009934.dita#WHSoftwareVariablesTridium-9A3264AE/Supervisor"
></keyword> station, you want separate alarm classes (and routing)
for individual stores, so you create <uicontrol>AlarmClass</uicontrol
> components named storeA_tempAlarm, storeB_tempAlarm, and so forth.</p
><p>Now in the <keyword conkeyref="wh_variables_n4/Supervisor"
conref="..\reuse\WH_SoftwareVariables_Tridium_N4_0000009934.dita#WHSoftwareVariablesTridium-9A3264AE/Supervisor"
></keyword>&#x2019;s <uicontrol>NiagaraNetwork</uicontrol>, under
each <uicontrol>NiagaraStation</uicontrol>&#x2019;s <uicontrol>Alarms</uicontrol
> extension, you would set the <uicontrol>Alarm Class</uicontrol> property
to pre-append the store identifier to the alarm class name: storeA_,
storeB_, etc.) as you set up when you created and named the <uicontrol
>AlarmClass</uicontrol> components in each remote station.</p><fig>
<title>Alarms properties under a NiagaraStation</title>
<image href="..\graphic\propertiesDriversNiagaraAlarmDeviceExt_0000081963.png"
placement="break" scale="65" scope="local"></image>
</fig><p>When a store alarm comes to this <keyword
conkeyref="wh_variables_n4/Supervisor"
conref="..\reuse\WH_SoftwareVariables_Tridium_N4_0000009934.dita#WHSoftwareVariablesTridium-9A3264AE/Supervisor"
></keyword>, the station adds the prepend text to the originating <uicontrol
>AlarmClass</uicontrol> from the remote station such that routing
looks for that named<uicontrol> AlarmClass</uicontrol>, for example:
storeB_humAlarm or storeW_runAlarm. This maintains the original alarm
class mapping at the store station level as well as segregating by
store in the <keyword conkeyref="wh_variables_n4/Supervisor"
conref="..\reuse\WH_SoftwareVariables_Tridium_N4_0000009934.dita#WHSoftwareVariablesTridium-9A3264AE/Supervisor"
></keyword> station.</p><note>This strategy does not automatically
create virtual alarm classes in the <keyword
conkeyref="wh_variables_n4/Supervisor"
conref="..\reuse\WH_SoftwareVariables_Tridium_N4_0000009934.dita#WHSoftwareVariablesTridium-9A3264AE/Supervisor"
></keyword> station. You still have to manually create all the needed <uicontrol
>AlarmClass</uicontrol> components. <uicontrol>AlarmClass</uicontrol
> component naming should match the Prepend or Append scheme as configured
under the <uicontrol>NiagaraStation</uicontrol>s in the <keyword
conkeyref="wh_variables_n4/Supervisor"
conref="..\reuse\WH_SoftwareVariables_Tridium_N4_0000009934.dita#WHSoftwareVariablesTridium-9A3264AE/Supervisor"
></keyword> station&#x2019;s <uicontrol>NiagaraNetwork</uicontrol
>.</note></section>
</conbody>
</concept><?Pub Caret -2?>
